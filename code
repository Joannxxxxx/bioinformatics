
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
in terminal
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# convert file ‘bed + bim + fam’ file format to vcf format
# plink --bfile file --export vcf-iid --out data

# select chromosome
# plink --bfile data --chr 1,2,3,4 --make-bed --out chr

# id-mapping
plink --bfile file --keep-fam id.txt --make-bed --out data

# QC - missing filter
plink --bfile data --geno 0.2 --make-bed -out data_miss

# QC - MAF filter
plink -bfile data_miss --maf 0.05 --make-bed -out data_maf

# prune - linkage disequilibrium
plink -bfile data_maf --indep-pairwise 50 10 0.05 --out id
plink -bfile data_maf --extract id.prune.in --make-bed --out data_pruned

# population structure
for K in $(seq 1 15); do admixture --cv data_pruned.bed $K -j40 | tee log${K}.out; done
grep -h CV log*.out

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
in R
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


# load package rMVP
# rMVP link for more details [https://github.com/xiaolei-lab/rMVP#pca-plot]
library(rMVP)

# prepare genotype data
MVP.Data(fileBed="data_pruned",
         filePhe=NULL,
         fileKin=FALSE,
         filePC=FALSE,       
         #priority="speed",
         #maxLine=10000,
         out="mvp"
         )
# set data
genotype <- attach.big.matrix("mvp.geno.desc")
phenotype <- read.table("pheno.csv",sep=",",head=TRUE)
map <- read.table("mvp.geno.map" , head = TRUE)

# GWAS
for(i in 2:ncol(phenotype)){
  imMVP <- MVP(
    phe=phenotype[, c(1, i)],
    geno=genotype,
    map=map,
    #K=Kinship,
    #CV.GLM=Covariates,
    #CV.MLM=Covariates,
    #CV.FarmCPU=Covariates,
    nPC.GLM=3,
    nPC.MLM=3,
    nPC.FarmCPU=3,
    priority="speed",
    #ncpus=10,
    vc.method="BRENT",
    maxLoop=10,
    method.bin="static",
    #permutation.threshold=TRUE,
    #permutation.rep=100,
    threshold=0.05,
    method=c("GLM", "MLM", "FarmCPU")
  )
  gc()
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
in terminal
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# convert binary file into vcf file
plink --bfile data_pruned --export vcf-iid --out data_pv

# apply PopLDdecay to calculate LD decay
# note that you should use PopLDdecay's absolute path
~/PopLDdecay/bin/PopLDdecay -InVCF data_pv.vcf -OutStat LD
# unzip the result

# plot
~/PopLDdecay/bin/Plot_OnePop.pl -InFile LD.stat -bin1 –break –bin2 -output LDdecay

# apply LDBlockShow to find candidate gene
# note that you should use LDBlockShow's absolute path
# note that pvalue.csv has to sep by '\t' and no header, format is [chr pos pvalue], see details in LDBlockShow's Example file
~/LDBlockShow/bin/LDBlockShow -InVCF data_pv.vcf -Region 2:2000-10000 -InGWAS pvalue.csv -InGFF file.gff3 -OutPut block -OutPng

# select significant region for haplotype
plink --bfile data_pruned --chr 8 --from-kb 1000 --to-kb 2000 —make-bed —out data_chr8

# add phenotype column
# note that the header of phenotype.txt should be : fid iid pheno1 pheno2 …
plink --bfile data_chr8 --pheno phenotype.txt --mpheno 1 --make-bed --out data_hap

# haplotype analysis
plink --bfile data_hap --hap-window 3,4,5 --hap-assoc

Error: The --hap... family of flags has not been reimplemented in PLINK 1.9 due
to poor phasing accuracy (and, consequently, inferior haplotype
likelihood/frequency estimates) relative to other software; for now, we
recommend using BEAGLE instead of PLINK for case/control haplotype association
analysis.  (You can use "--recode beagle" to export data.)  We apologize for
the inconvenience, and plan to develop variants of the --hap... flags which
handle pre-phased data effectively.



plink --bfile mydata --snp rs652423 --window 20
#which extracts only SNPs within +/- 20kb of rs652423.


# 若输入格式为 vcf
# plink --vcf pruned.vcf --maf 0.05 --geno 0.6 --recode vcf-iid --out demo.filt --allow-extra-chr

